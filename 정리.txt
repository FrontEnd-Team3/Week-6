

리엑트 가상돔

1. 리엑트의 가상돔은 실제 DOM의 복사본이다. 이 복사본은 객체형식으로 저장된다.
2. 리엑트는 항상 두개의 가상돔을 가진다. 첫번째는 변경 이전의 내용을 담고있고, 두번째는 변경 이후에 보여질 내용을 담고있다.
3. 실제 DOM이 변경되기 이전에 리엑트는 두 개의 가상돔을 비교하여 정확히 어떤 부분이 바뀌었는지 비교하고 파악한다. 이러한 과정을 Diffing이라고 한다.
4. Diffing을 통해서 변경된 부분들을 파악한 후, 리엑트는 업데이트(Batch Update)를 수행함으로 실제 DOM에 한번에 적용시켜준다.

React.Fragment란?

리엑트에서 컴포넌트들이 리턴하는 값들은 반드시 단 하나의 최상위 태그로 묶여있어야한다.
하나로 묶지 않을 경우 에러가 발생하게 된다. 그래서 리엑트를 사용할때 최상위 태그로 div를 사용하는 경우가 있는데
div를 사용할 경우 불필요한 태그 하나가 더 추가되고 css를 사용할 때 가끔 번거러움

이 상황에서 사용하는 것이 React.Fragment이다.
React.Fragment는 별도의 태그없이 dom에 추가하는 것이 가능하다

사용법)
<React.Fragment>                     
  <h1>안녕하세요!</h1>      
  <p>밥 먹었어?</p> 
</React.Fragment>           
     
<>
  <h1>안녕하세요!</h1>
  <p>밥 먹었어?</p> 
</>

=======================================================================================================

 ** useState
    
    React.js에서 useState는 함수 컴포넌트에서 상태를 관리하기 위해 사용되는 훅(Hook)입니다. 이 훅은 함수 컴포넌트에서 상태 변수를 선언하고 해당 변수를 갱신할 수 있는 기능을 제공합니다.

    useState를 사용하려면 먼저 react에서 useState를 가져와야 합니다. 예를 들면 다음과 같이 useState를 가져올 수 있습니다.

    ex) import React, { useState } from 'react'; 

    useState는 배열 형태의 반환 값을 가집니다. 첫 번째 원소는 상태 변수의 현재 값이고, 두 번째 원소는 상태 변수를 갱신할 수 있는 함수입니다. 일반적으로 이러한 배열 원소를 비구조화 할당을 사용하여 추출합니다.

    useState를 사용하여 카운터 기능을 구현하는 예시

    ex) import React, { useState } from 'react';

       function Counter() {
       // useState를 사용하여 상태 변수와 갱신 함수를 선언
       const [count, setCount] = useState(0);

       // 버튼 클릭 시 카운터를 증가시키는 함수
       const increment = () => {
       setCount(count + 1);
       };

        return (
        <div>
        <p>Count: {count}</p>
       <button onClick={increment}>Increment</button>
     </div>
      );
      }

      위의 코드에서 useState(0)은 초기값이 0인 상태 변수 count와 count를 갱신할 수 있는 함수 setCount를 선언합니다. setCount 함수는 count 값을 갱신할 때 사용됩니다.

      increment 함수는 버튼을 클릭할 때 호출되며, setCount를 사용하여 count 값을 1씩 증가시킵니다. 그리고 count 값을 화면에 렌더링합니다.

      useState는 함수 컴포넌트 내에서 여러 번 사용될 수 있으며, 각각의 useState 호출은 독립적인 상태 변수와 갱신 함수를 생성합니다.

------------------------------------------------------------------------------------------------------------